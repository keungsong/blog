let verify,User;_b0b‍.x([["authGuard",()=>authGuard],["adminGuard",()=>adminGuard]]);_b0b‍.w("jsonwebtoken",[["verify",["verify"],function(v){verify=v}]]);_b0b‍.w("../models/User",[["default",["User"],function(v){User=v}]]);


       const authGuard = async (req, res, next) => {
    if(
        req.headers.authorization && 
        req.headers.authorization.startsWith("Bearer")
    ){
        try {
            const token = req.headers.authorization.split(" ")[1];
            const {id} = verify(token, process.env.JWT_SECRET);
            req.user = await User.findById(id).select("-password");
            next();
        } catch (error) {
            let err = new Error("Not authorized, Token failed");
            err.statusCode = 401;
            next(err);
        }
    }else{
        let error = new Error("Not authorized, no token");
        error.statusCode = 401;
        next(error);
    }

}

       const adminGuard = (req, res, next) => {
   if(req.user && req.user.admin){
    next();

   }else{
    let error = new Error("Not authorized as an admin");
    error.statusCode = 401;
    next(error);
   }
}